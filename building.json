[
    {
        "id": "262a4e73.99b412",
        "type": "tab",
        "label": "Building",
        "disabled": false,
        "info": ""
    },
    {
        "id": "2cba23da.7b9e2c",
        "type": "group",
        "z": "262a4e73.99b412",
        "name": "payload",
        "style": {
            "fill": "#7fb7df",
            "label": true,
            "color": "#777777"
        },
        "nodes": [
            "bbc34c36.b6ace",
            "6a5801fd.9fd3d",
            "4d74f06e.bf00e",
            "a6d87f77.9af52"
        ],
        "x": 554,
        "y": 99,
        "w": 552,
        "h": 122
    },
    {
        "id": "4cd80b54.dad114",
        "type": "group",
        "z": "262a4e73.99b412",
        "name": "floors",
        "style": {
            "fill": "#b797cf",
            "label": true,
            "stroke": "#a4a4a4",
            "color": "#777777"
        },
        "nodes": [
            "132e7bae.c14df4",
            "93027e2e.758a2",
            "5433e20c.e14aec"
        ],
        "x": 114,
        "y": 419,
        "w": 152,
        "h": 162
    },
    {
        "id": "8cb664b3.b35b88",
        "type": "group",
        "z": "262a4e73.99b412",
        "name": "",
        "style": {
            "fill": "#d1d1d1",
            "label": true
        },
        "nodes": [
            "1fd6ff8b.aa5b4",
            "dca31d2e.afa79",
            "8f1f9699.450bc8"
        ],
        "x": 354,
        "y": 99,
        "w": 152,
        "h": 202
    },
    {
        "id": "94329e0b.58842",
        "type": "group",
        "z": "262a4e73.99b412",
        "name": "",
        "style": {
            "fill": "#c8e7a7",
            "label": true
        },
        "nodes": [
            "ee40698f.2a5a88",
            "5e7f7bfb.38e7a4",
            "caa225b3.88ad38",
            "a614791d.c7e188",
            "dca91db8.ed8e1",
            "8e8069e8.ebdfd8"
        ],
        "x": 34,
        "y": 39,
        "w": 272,
        "h": 322
    },
    {
        "id": "99ce0d82.29cee",
        "type": "group",
        "z": "262a4e73.99b412",
        "name": "message",
        "style": {
            "stroke": "#a4a4a4",
            "label": true,
            "fill": "#ffff7f",
            "color": "#777777"
        },
        "nodes": [
            "972801f4.6b272",
            "8e7ae915.12af08"
        ],
        "x": 334,
        "y": 459,
        "w": 272,
        "h": 82
    },
    {
        "id": "bdfeae3c.2774",
        "type": "group",
        "z": "262a4e73.99b412",
        "name": "protocols",
        "style": {
            "fill": "#c8e7a7",
            "label": true,
            "color": "#777777"
        },
        "nodes": [
            "10327288.0d6f1d",
            "6d1a03e5.0236cc",
            "65c1cc32.6d45e4",
            "e43331d9.edc1c"
        ],
        "x": 654,
        "y": 399,
        "w": 392,
        "h": 202
    },
    {
        "id": "ee40698f.2a5a88",
        "type": "inject",
        "z": "262a4e73.99b412",
        "g": "94329e0b.58842",
        "name": "temperature",
        "props": [
            {
                "p": "basename",
                "v": "temperature",
                "vt": "str"
            },
            {
                "p": "payload"
            },
            {
                "p": "deltaTime",
                "v": "0.1",
                "vt": "num"
            },
            {
                "p": "count",
                "v": "3",
                "vt": "num"
            },
            {
                "p": "min",
                "v": "15",
                "vt": "num"
            },
            {
                "p": "max",
                "v": "40",
                "vt": "num"
            },
            {
                "p": "offLimitsProb",
                "v": "0.1",
                "vt": "str"
            },
            {
                "p": "unit",
                "v": "Celsius",
                "vt": "str"
            }
        ],
        "repeat": "15",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "1fd6ff8b.aa5b4"
            ]
        ]
    },
    {
        "id": "4d74f06e.bf00e",
        "type": "function",
        "z": "262a4e73.99b412",
        "g": "2cba23da.7b9e2c",
        "name": "compute_float",
        "func": "for (var i = 0; i < msg.count; i++) {\n    var offLimits = Math.random() < msg.offLimitsProb;\n    var range = msg.max - msg.min;\n    var val = msg.min + range * Math.random();\n    if (offLimits) {\n        var sign = Math.random() > 0.5 ? 1 : -1;\n        val = sign * range * Math.random() * msg.offLimitsProb;\n        if (sign < 0) val += msg.min;\n        else val += msg.max;\n    }\n    msg.payload[i] = val;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 820,
        "y": 140,
        "wires": [
            [
                "bbc34c36.b6ace"
            ]
        ]
    },
    {
        "id": "5e7f7bfb.38e7a4",
        "type": "inject",
        "z": "262a4e73.99b412",
        "g": "94329e0b.58842",
        "name": "humidity",
        "props": [
            {
                "p": "basename",
                "v": "humidity",
                "vt": "str"
            },
            {
                "p": "payload"
            },
            {
                "p": "count",
                "v": "3",
                "vt": "num"
            },
            {
                "p": "deltaTime",
                "v": "0.5",
                "vt": "num"
            },
            {
                "p": "min",
                "v": "30",
                "vt": "num"
            },
            {
                "p": "max",
                "v": "70",
                "vt": "num"
            },
            {
                "p": "offLimitsProb",
                "v": "0.2",
                "vt": "str"
            },
            {
                "p": "unit",
                "v": "percentage",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 140,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "caa225b3.88ad38",
        "type": "inject",
        "z": "262a4e73.99b412",
        "g": "94329e0b.58842",
        "name": "rooms occupancy",
        "props": [
            {
                "p": "basename",
                "v": "occupancy",
                "vt": "str"
            },
            {
                "p": "count",
                "v": "3",
                "vt": "num"
            },
            {
                "p": "deltaTime",
                "v": "0.3",
                "vt": "num"
            },
            {
                "p": "payload"
            },
            {
                "p": "trueProb",
                "v": "0.7",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 170,
        "y": 240,
        "wires": [
            [
                "8f1f9699.450bc8"
            ]
        ]
    },
    {
        "id": "6a5801fd.9fd3d",
        "type": "function",
        "z": "262a4e73.99b412",
        "g": "2cba23da.7b9e2c",
        "name": "compute_bool",
        "func": "for (var i = 0; i < msg.count; i++) {\n    msg.payload[i] = Math.random() < msg.trueProb ? true : false;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 820,
        "y": 180,
        "wires": [
            [
                "bbc34c36.b6ace"
            ]
        ]
    },
    {
        "id": "bbc34c36.b6ace",
        "type": "function",
        "z": "262a4e73.99b412",
        "g": "2cba23da.7b9e2c",
        "name": "create_payload",
        "func": "for (var i = 0; i < msg.count; i++) {\n    payload = {\n        \"bn\": msg.basename,\n        \"n\": `${i+1}`, \n        \"u\": msg.unit,\n        \"t\": new Date().getTime() / 1000 + msg.deltaTime * i,\n    };\n    \n    var msgPayload = msg.payload[i]\n    switch(typeof(msgPayload)) {\n        case \"number\":\n            payload[\"v\"] = msgPayload;\n            break;    \n        case \"boolean\": \n            payload[\"vb\"] = msgPayload;\n            break;\n        case \"string\":\n            payload[\"vs\"] = msgPayload;\n            break;\n        default:\n            payload[\"v\"] = msgPayload;\n    }\n    \n    msg.payload[i] = payload;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1000,
        "y": 180,
        "wires": [
            [
                "132e7bae.c14df4",
                "93027e2e.758a2",
                "5433e20c.e14aec"
            ]
        ]
    },
    {
        "id": "7e076b5f.ba9574",
        "type": "debug",
        "z": "262a4e73.99b412",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 680,
        "wires": []
    },
    {
        "id": "132e7bae.c14df4",
        "type": "change",
        "z": "262a4e73.99b412",
        "g": "4cd80b54.dad114",
        "name": "floor_1",
        "rules": [
            {
                "t": "set",
                "p": "channel",
                "pt": "msg",
                "to": "MF_FLOOR_1",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 190,
        "y": 460,
        "wires": [
            [
                "972801f4.6b272"
            ]
        ]
    },
    {
        "id": "972801f4.6b272",
        "type": "function",
        "z": "262a4e73.99b412",
        "g": "99ce0d82.29cee",
        "name": "topic",
        "func": "msgs = [];\nmsg.payload.forEach(function(payload) {\n    var message = {};\n    msgs.push(message);\n    message.payload = [payload];\n    message.protocol = msg.protocol;\n    \n    var subtopic = `/room${payload.n}/${msg.basename}`;\n    \n    // mqtt\n    var topic = \"channels/\" + msg.channel + \"/messages\";\n    topic += subtopic;\n    if (msg.protocol == \"mqtt\") {\n        message.topic = topic;\n        return;\n    }\n    \n    var url = env.get(\"MF_URL\");\n    \n    // http & coap\n    var addPrefix = msg.protocol == \"http\" ?\n        `https://${url}/http/` : `coap://${url}/`;\n    var addrSuffix = `channels/${msg.channel}/messages`;\n    message.url = addPrefix + addrSuffix + subtopic;\n    \n    if (msg.protocol == \"http\") {\n        message.headers = headers;\n    } else if (msg.protocol == \"coap\") {\n        message.url += coapAuth;\n    }\n    \n})\n\n\nreturn [msgs];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\nheaders = {\n    \"Authorization\": env.get(\"MF_HTTP\")\n};\ncoapAuth = `?auth=${env.get(\"MF_COAP\")}`;",
        "finalize": "",
        "x": 410,
        "y": 500,
        "wires": [
            [
                "8e7ae915.12af08",
                "7e076b5f.ba9574"
            ]
        ]
    },
    {
        "id": "93027e2e.758a2",
        "type": "change",
        "z": "262a4e73.99b412",
        "g": "4cd80b54.dad114",
        "name": "floor_2",
        "rules": [
            {
                "t": "set",
                "p": "channel",
                "pt": "msg",
                "to": "MF_FLOOR_2",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 190,
        "y": 500,
        "wires": [
            [
                "972801f4.6b272"
            ]
        ]
    },
    {
        "id": "8e7ae915.12af08",
        "type": "json",
        "z": "262a4e73.99b412",
        "g": "99ce0d82.29cee",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 530,
        "y": 500,
        "wires": [
            [
                "10327288.0d6f1d"
            ]
        ]
    },
    {
        "id": "a6d87f77.9af52",
        "type": "function",
        "z": "262a4e73.99b412",
        "g": "2cba23da.7b9e2c",
        "name": "route_msg",
        "func": "msg.count = msg.count || 1;\nmsg.deltaTime = msg.deltaTime || 0;\n\n// https://nodered.org/docs/user-guide/writing-functions#multiple-outputs\nvar msgArray = [null, null]; // outputs\nswitch(typeof(msg.payload)) {\n    case \"number\":\n        msgArray[0] = msg; // send to output 1\n        break;\n    case \"boolean\":\n        msgArray[1] = msg; // send to output 2\n        break;\n    default:\n        msgArray[0] = msg;\n        break;    \n}\n\nmsg.payload = [] // SenML array;\n\nreturn msgArray;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 650,
        "y": 180,
        "wires": [
            [
                "4d74f06e.bf00e"
            ],
            [
                "6a5801fd.9fd3d"
            ]
        ]
    },
    {
        "id": "a614791d.c7e188",
        "type": "inject",
        "z": "262a4e73.99b412",
        "g": "94329e0b.58842",
        "name": "aerosol",
        "props": [
            {
                "p": "basename",
                "v": "aerosol",
                "vt": "str"
            },
            {
                "p": "payload"
            },
            {
                "p": "count",
                "v": "3",
                "vt": "num"
            },
            {
                "p": "deltaTime",
                "v": "0.5",
                "vt": "num"
            },
            {
                "p": "min",
                "v": "10",
                "vt": "num"
            },
            {
                "p": "max",
                "v": "35",
                "vt": "num"
            },
            {
                "p": "offLimitsProb",
                "v": "0.2",
                "vt": "str"
            },
            {
                "p": "unit",
                "v": "μg/m",
                "vt": "str"
            }
        ],
        "repeat": "45",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 140,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "dca91db8.ed8e1",
        "type": "inject",
        "z": "262a4e73.99b412",
        "g": "94329e0b.58842",
        "name": "doors open/close",
        "props": [
            {
                "p": "basename",
                "v": "door",
                "vt": "str"
            },
            {
                "p": "count",
                "v": "3",
                "vt": "num"
            },
            {
                "p": "deltaTime",
                "v": "0",
                "vt": "num"
            },
            {
                "p": "payload"
            },
            {
                "p": "trueProb",
                "v": "0.3",
                "vt": "str"
            }
        ],
        "repeat": "15",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 170,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "8e8069e8.ebdfd8",
        "type": "inject",
        "z": "262a4e73.99b412",
        "g": "94329e0b.58842",
        "name": "windows open/close",
        "props": [
            {
                "p": "basename",
                "v": "window",
                "vt": "str"
            },
            {
                "p": "count",
                "v": "3",
                "vt": "num"
            },
            {
                "p": "deltaTime",
                "v": "0",
                "vt": "num"
            },
            {
                "p": "payload"
            },
            {
                "p": "trueProb",
                "v": "0.2",
                "vt": "str"
            }
        ],
        "repeat": "8",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 180,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "5433e20c.e14aec",
        "type": "change",
        "z": "262a4e73.99b412",
        "g": "4cd80b54.dad114",
        "name": "floor_3",
        "rules": [
            {
                "t": "set",
                "p": "channel",
                "pt": "msg",
                "to": "MF_FLOOR_3",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 190,
        "y": 540,
        "wires": [
            [
                "972801f4.6b272"
            ]
        ]
    },
    {
        "id": "1fd6ff8b.aa5b4",
        "type": "change",
        "z": "262a4e73.99b412",
        "g": "8cb664b3.b35b88",
        "name": "mqtt",
        "rules": [
            {
                "t": "set",
                "p": "protocol",
                "pt": "msg",
                "to": "mqtt",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 140,
        "wires": [
            [
                "a6d87f77.9af52"
            ]
        ]
    },
    {
        "id": "dca31d2e.afa79",
        "type": "change",
        "z": "262a4e73.99b412",
        "g": "8cb664b3.b35b88",
        "name": "coap",
        "rules": [
            {
                "t": "set",
                "p": "protocol",
                "pt": "msg",
                "to": "coap",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "8f1f9699.450bc8",
        "type": "change",
        "z": "262a4e73.99b412",
        "g": "8cb664b3.b35b88",
        "name": "http",
        "rules": [
            {
                "t": "set",
                "p": "protocol",
                "pt": "msg",
                "to": "http",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 200,
        "wires": [
            [
                "a6d87f77.9af52"
            ]
        ]
    },
    {
        "id": "10327288.0d6f1d",
        "type": "switch",
        "z": "262a4e73.99b412",
        "g": "bdfeae3c.2774",
        "name": "protocol",
        "property": "protocol",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "http",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "mqtt",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "coap",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 740,
        "y": 500,
        "wires": [
            [
                "65c1cc32.6d45e4"
            ],
            [
                "6d1a03e5.0236cc"
            ],
            [
                "e43331d9.edc1c"
            ]
        ]
    },
    {
        "id": "6d1a03e5.0236cc",
        "type": "mqtt out",
        "z": "262a4e73.99b412",
        "g": "bdfeae3c.2774",
        "name": "building",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "7f05a107.a8ce6",
        "x": 940,
        "y": 500,
        "wires": []
    },
    {
        "id": "65c1cc32.6d45e4",
        "type": "http request",
        "z": "262a4e73.99b412",
        "g": "bdfeae3c.2774",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "body",
        "url": "",
        "tls": "a9a6a165.c29ff",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 950,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "e43331d9.edc1c",
        "type": "coap request",
        "z": "262a4e73.99b412",
        "g": "bdfeae3c.2774",
        "method": "POST",
        "observe": false,
        "url": "",
        "content-format": "text/plain",
        "raw-buffer": false,
        "name": "coap",
        "x": 930,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "d0cee8a2.a7dc28",
        "type": "comment",
        "z": "262a4e73.99b412",
        "name": "env vars",
        "info": "We need to set\n\n```\nexport MF_FLOOR_1=<chan_1_id>\nexport MF_FLOOR_2=<chan_2_id>\nexport MF_FLOOR_3=<chan_3_id>\n\nexport MF_HTTP=<thing_1_key>\nexport MF_MQTT_USR=<thing_2_id>\nexport MF_MQTT_PASS=<thing_2_key>\nexport MF_COAP=<thing_3_key>\n```\n\nWhere \"chan\" and \"thing\" refer to mainflux things.",
        "x": 400,
        "y": 40,
        "wires": []
    },
    {
        "id": "7f05a107.a8ce6",
        "type": "mqtt-broker",
        "z": "",
        "name": "building",
        "broker": "demo.mainflux.com",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "a9a6a165.c29ff",
        "type": "tls-config",
        "z": "",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "thing.crt",
        "keyname": "thing.key",
        "caname": "ca.crt",
        "servername": "",
        "verifyservercert": false
    }
]