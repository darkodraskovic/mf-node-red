[
    {
        "id": "9cc8bab8.422b58",
        "type": "tab",
        "label": "Building",
        "disabled": false,
        "info": ""
    },
    {
        "id": "1e21ccf6.e32523",
        "type": "group",
        "z": "9cc8bab8.422b58",
        "name": "",
        "style": {
            "fill": "#d1d1d1",
            "label": true
        },
        "nodes": [
            "e2b23358.aa3d4",
            "d45449de.13ba58"
        ],
        "x": 354,
        "y": 159,
        "w": 152,
        "h": 142
    },
    {
        "id": "4ba3bc1d.e5d164",
        "type": "group",
        "z": "9cc8bab8.422b58",
        "name": "protocols",
        "style": {
            "fill": "#c8e7a7",
            "label": true,
            "color": "#777777"
        },
        "nodes": [
            "566ba8c1.c52658",
            "f95a5ef6.d2a36",
            "532439f8.d80c98",
            "302d4956.5d97c6",
            "8d0172b7.d9d35"
        ],
        "x": 614,
        "y": 419,
        "w": 392,
        "h": 202
    },
    {
        "id": "a76816b6.8dc578",
        "type": "group",
        "z": "9cc8bab8.422b58",
        "name": "message",
        "style": {
            "stroke": "#a4a4a4",
            "label": true,
            "fill": "#ffff7f",
            "color": "#777777"
        },
        "nodes": [
            "82a174e8.1bd4c8",
            "319f8951.e6d796",
            "64921d5d.31ac14"
        ],
        "x": 314,
        "y": 479,
        "w": 272,
        "h": 122
    },
    {
        "id": "b83b6144.2bb6c",
        "type": "group",
        "z": "9cc8bab8.422b58",
        "name": "floors",
        "style": {
            "fill": "#b797cf",
            "label": true,
            "stroke": "#a4a4a4",
            "color": "#777777"
        },
        "nodes": [
            "ce75f87a.6f0a28",
            "1bb28aaf.b08e65",
            "d81260b9.e3177",
            "b2206ecf.cae3d"
        ],
        "x": 94,
        "y": 439,
        "w": 212,
        "h": 202
    },
    {
        "id": "dd1a3c75.5a8e7",
        "type": "group",
        "z": "9cc8bab8.422b58",
        "name": "",
        "style": {
            "fill": "#c8e7a7",
            "label": true
        },
        "nodes": [
            "ec1c7001.c33d4",
            "40cda9b2.2e8ab8",
            "d72461c7.48b2c",
            "cbcaf42.b72e308",
            "1229b507.9d856b",
            "96e60311.4f463"
        ],
        "x": 34,
        "y": 99,
        "w": 272,
        "h": 322
    },
    {
        "id": "e2533288.b1453",
        "type": "group",
        "z": "9cc8bab8.422b58",
        "name": "payload",
        "style": {
            "fill": "#7fb7df",
            "label": true,
            "color": "#777777"
        },
        "nodes": [
            "cc708eeb.e2bb9",
            "6e8325f3.66c95c",
            "746639a8.3ee678",
            "9dc28570.416488"
        ],
        "x": 554,
        "y": 159,
        "w": 552,
        "h": 122
    },
    {
        "id": "ec1c7001.c33d4",
        "type": "inject",
        "z": "9cc8bab8.422b58",
        "g": "dd1a3c75.5a8e7",
        "name": "temperature",
        "props": [
            {
                "p": "basename",
                "v": "temperature",
                "vt": "str"
            },
            {
                "p": "payload"
            },
            {
                "p": "deltaTime",
                "v": "0.1",
                "vt": "num"
            },
            {
                "p": "count",
                "v": "3",
                "vt": "num"
            },
            {
                "p": "min",
                "v": "15",
                "vt": "num"
            },
            {
                "p": "max",
                "v": "40",
                "vt": "num"
            },
            {
                "p": "offLimitsProb",
                "v": "0.1",
                "vt": "str"
            },
            {
                "p": "unit",
                "v": "Celsius",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 160,
        "y": 140,
        "wires": [
            [
                "e2b23358.aa3d4"
            ]
        ]
    },
    {
        "id": "746639a8.3ee678",
        "type": "function",
        "z": "9cc8bab8.422b58",
        "g": "e2533288.b1453",
        "name": "compute_float",
        "func": "for (var i = 0; i < msg.count; i++) {\n    var offLimits = Math.random() < msg.offLimitsProb;\n    var range = msg.max - msg.min;\n    var val = msg.min + range * Math.random();\n    if (offLimits) {\n        var sign = Math.random() > 0.5 ? 1 : -1;\n        val = sign * range * Math.random() * msg.offLimitsProb;\n        if (sign < 0) val += msg.min;\n        else val += msg.max;\n    }\n    msg.payload[i] = val;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 820,
        "y": 200,
        "wires": [
            [
                "cc708eeb.e2bb9"
            ]
        ]
    },
    {
        "id": "40cda9b2.2e8ab8",
        "type": "inject",
        "z": "9cc8bab8.422b58",
        "g": "dd1a3c75.5a8e7",
        "name": "humidity",
        "props": [
            {
                "p": "basename",
                "v": "humidity",
                "vt": "str"
            },
            {
                "p": "payload"
            },
            {
                "p": "count",
                "v": "3",
                "vt": "num"
            },
            {
                "p": "deltaTime",
                "v": "0.5",
                "vt": "num"
            },
            {
                "p": "min",
                "v": "30",
                "vt": "num"
            },
            {
                "p": "max",
                "v": "70",
                "vt": "num"
            },
            {
                "p": "offLimitsProb",
                "v": "0.1",
                "vt": "str"
            },
            {
                "p": "unit",
                "v": "percentage",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 140,
        "y": 180,
        "wires": [
            [
                "e2b23358.aa3d4"
            ]
        ]
    },
    {
        "id": "d72461c7.48b2c",
        "type": "inject",
        "z": "9cc8bab8.422b58",
        "g": "dd1a3c75.5a8e7",
        "name": "rooms occupancy",
        "props": [
            {
                "p": "basename",
                "v": "occupancy",
                "vt": "str"
            },
            {
                "p": "count",
                "v": "3",
                "vt": "num"
            },
            {
                "p": "deltaTime",
                "v": "0.5",
                "vt": "num"
            },
            {
                "p": "payload"
            },
            {
                "p": "trueProb",
                "v": "0.8",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 170,
        "y": 300,
        "wires": [
            [
                "d45449de.13ba58"
            ]
        ]
    },
    {
        "id": "6e8325f3.66c95c",
        "type": "function",
        "z": "9cc8bab8.422b58",
        "g": "e2533288.b1453",
        "name": "compute_bool",
        "func": "for (var i = 0; i < msg.count; i++) {\n    msg.payload[i] = Math.random() < msg.trueProb ? true : false;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 820,
        "y": 240,
        "wires": [
            [
                "cc708eeb.e2bb9"
            ]
        ]
    },
    {
        "id": "cc708eeb.e2bb9",
        "type": "function",
        "z": "9cc8bab8.422b58",
        "g": "e2533288.b1453",
        "name": "create_payload",
        "func": "for (var i = 0; i < msg.count; i++) {\n    payload = {\n        \"bn\": msg.basename,\n        \"n\": `${i+1}`, \n        \"u\": msg.unit,\n        \"t\": new Date().getTime() / 1000 + msg.deltaTime * i,\n    };\n    \n    var msgPayload = msg.payload[i]\n    switch(typeof(msgPayload)) {\n        case \"number\":\n            payload[\"v\"] = msgPayload;\n            break;    \n        case \"boolean\": \n            payload[\"vb\"] = msgPayload;\n            break;\n        case \"string\":\n            payload[\"vs\"] = msgPayload;\n            break;\n        default:\n            payload[\"v\"] = msgPayload;\n    }\n    \n    msg.payload[i] = payload;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1000,
        "y": 240,
        "wires": [
            [
                "ce75f87a.6f0a28",
                "1bb28aaf.b08e65",
                "d81260b9.e3177"
            ]
        ]
    },
    {
        "id": "3f1bcf3c.914f",
        "type": "debug",
        "z": "9cc8bab8.422b58",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 680,
        "wires": []
    },
    {
        "id": "ce75f87a.6f0a28",
        "type": "change",
        "z": "9cc8bab8.422b58",
        "g": "b83b6144.2bb6c",
        "name": "floor_1",
        "rules": [
            {
                "t": "set",
                "p": "channel",
                "pt": "msg",
                "to": "MF_FLOOR_1",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 170,
        "y": 480,
        "wires": [
            [
                "82a174e8.1bd4c8"
            ]
        ]
    },
    {
        "id": "82a174e8.1bd4c8",
        "type": "function",
        "z": "9cc8bab8.422b58",
        "g": "a76816b6.8dc578",
        "name": "topic",
        "func": "msgs = [];\nmsg.payload.forEach(function(payload) {\n    var message = {};\n    msgs.push(message);\n    message.payload = [payload];\n    message.protocol = msg.protocol;\n    \n    var topic = \"channels/\" + msg.channel + \"/messages\";\n    var subtopic = `/room${payload.n}/${msg.basename}`;\n    topic += subtopic;\n    \n    // mqtt\n    if (msg.protocol == \"mqtt\") {\n        message.topic = topic;\n        return;\n    }\n    \n    // http\n    var http = flow.get(\"MF_HTTPS\") ? 'https' : 'http';\n    var url = flow.get(\"MF_URL\");\n    message.url = `${http}://${url}/http/` + topic;\n    message.headers = headers;\n})\n\nreturn [msgs];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\nheaders = {\n    \"Authorization\": flow.get(\"MF_HTTP\")\n};",
        "finalize": "",
        "x": 390,
        "y": 520,
        "wires": [
            [
                "319f8951.e6d796"
            ]
        ]
    },
    {
        "id": "1bb28aaf.b08e65",
        "type": "change",
        "z": "9cc8bab8.422b58",
        "g": "b83b6144.2bb6c",
        "name": "floor_2",
        "rules": [
            {
                "t": "set",
                "p": "channel",
                "pt": "msg",
                "to": "MF_FLOOR_2",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 170,
        "y": 520,
        "wires": [
            [
                "82a174e8.1bd4c8"
            ]
        ]
    },
    {
        "id": "319f8951.e6d796",
        "type": "json",
        "z": "9cc8bab8.422b58",
        "g": "a76816b6.8dc578",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 510,
        "y": 520,
        "wires": [
            [
                "3f1bcf3c.914f"
            ]
        ]
    },
    {
        "id": "9dc28570.416488",
        "type": "function",
        "z": "9cc8bab8.422b58",
        "g": "e2533288.b1453",
        "name": "route_msg",
        "func": "msg.count = msg.count || 1;\nmsg.deltaTime = msg.deltaTime || 0;\n\n// https://nodered.org/docs/user-guide/writing-functions#multiple-outputs\nvar msgArray = [null, null]; // outputs\nswitch(typeof(msg.payload)) {\n    case \"number\":\n        msgArray[0] = msg; // send to output 1\n        break;\n    case \"boolean\":\n        msgArray[1] = msg; // send to output 2\n        break;\n    default:\n        msgArray[0] = msg;\n        break;    \n}\n\nmsg.payload = [] // SenML array;\n\nreturn msgArray;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 650,
        "y": 240,
        "wires": [
            [
                "746639a8.3ee678"
            ],
            [
                "6e8325f3.66c95c"
            ]
        ]
    },
    {
        "id": "cbcaf42.b72e308",
        "type": "inject",
        "z": "9cc8bab8.422b58",
        "g": "dd1a3c75.5a8e7",
        "name": "aerosol",
        "props": [
            {
                "p": "basename",
                "v": "aerosol",
                "vt": "str"
            },
            {
                "p": "payload"
            },
            {
                "p": "count",
                "v": "3",
                "vt": "num"
            },
            {
                "p": "deltaTime",
                "v": "0.5",
                "vt": "num"
            },
            {
                "p": "min",
                "v": "10",
                "vt": "num"
            },
            {
                "p": "max",
                "v": "35",
                "vt": "num"
            },
            {
                "p": "offLimitsProb",
                "v": "0.1",
                "vt": "str"
            },
            {
                "p": "unit",
                "v": "μg/m3",
                "vt": "str"
            }
        ],
        "repeat": "45",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 140,
        "y": 220,
        "wires": [
            [
                "e2b23358.aa3d4"
            ]
        ]
    },
    {
        "id": "1229b507.9d856b",
        "type": "inject",
        "z": "9cc8bab8.422b58",
        "g": "dd1a3c75.5a8e7",
        "name": "doors open/close",
        "props": [
            {
                "p": "basename",
                "v": "door",
                "vt": "str"
            },
            {
                "p": "count",
                "v": "3",
                "vt": "num"
            },
            {
                "p": "deltaTime",
                "v": "0",
                "vt": "num"
            },
            {
                "p": "payload"
            },
            {
                "p": "trueProb",
                "v": "0.5",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 170,
        "y": 340,
        "wires": [
            [
                "d45449de.13ba58"
            ]
        ]
    },
    {
        "id": "96e60311.4f463",
        "type": "inject",
        "z": "9cc8bab8.422b58",
        "g": "dd1a3c75.5a8e7",
        "name": "windows open/close",
        "props": [
            {
                "p": "basename",
                "v": "window",
                "vt": "str"
            },
            {
                "p": "count",
                "v": "3",
                "vt": "num"
            },
            {
                "p": "deltaTime",
                "v": "0",
                "vt": "num"
            },
            {
                "p": "payload"
            },
            {
                "p": "trueProb",
                "v": "0.5",
                "vt": "str"
            }
        ],
        "repeat": "45",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 180,
        "y": 380,
        "wires": [
            [
                "d45449de.13ba58"
            ]
        ]
    },
    {
        "id": "d81260b9.e3177",
        "type": "change",
        "z": "9cc8bab8.422b58",
        "g": "b83b6144.2bb6c",
        "name": "floor_3",
        "rules": [
            {
                "t": "set",
                "p": "channel",
                "pt": "msg",
                "to": "MF_FLOOR_3",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 170,
        "y": 560,
        "wires": [
            [
                "82a174e8.1bd4c8"
            ]
        ]
    },
    {
        "id": "e2b23358.aa3d4",
        "type": "change",
        "z": "9cc8bab8.422b58",
        "g": "1e21ccf6.e32523",
        "name": "mqtt",
        "rules": [
            {
                "t": "set",
                "p": "protocol",
                "pt": "msg",
                "to": "mqtt",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 200,
        "wires": [
            [
                "9dc28570.416488"
            ]
        ]
    },
    {
        "id": "d45449de.13ba58",
        "type": "change",
        "z": "9cc8bab8.422b58",
        "g": "1e21ccf6.e32523",
        "name": "http",
        "rules": [
            {
                "t": "set",
                "p": "protocol",
                "pt": "msg",
                "to": "http",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 260,
        "wires": [
            [
                "9dc28570.416488"
            ]
        ]
    },
    {
        "id": "566ba8c1.c52658",
        "type": "switch",
        "z": "9cc8bab8.422b58",
        "g": "4ba3bc1d.e5d164",
        "name": "protocol",
        "property": "protocol",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "http",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "mqtt",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "coap",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 740,
        "y": 520,
        "wires": [
            [
                "532439f8.d80c98"
            ],
            [
                "f95a5ef6.d2a36"
            ],
            [
                "302d4956.5d97c6"
            ]
        ]
    },
    {
        "id": "f95a5ef6.d2a36",
        "type": "mqtt out",
        "z": "9cc8bab8.422b58",
        "g": "4ba3bc1d.e5d164",
        "name": "building",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "2351332e.45998c",
        "x": 900,
        "y": 520,
        "wires": []
    },
    {
        "id": "532439f8.d80c98",
        "type": "http request",
        "z": "9cc8bab8.422b58",
        "g": "4ba3bc1d.e5d164",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "body",
        "url": "",
        "tls": "3341d38b.e4e6ec",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 910,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "302d4956.5d97c6",
        "type": "coap request",
        "z": "9cc8bab8.422b58",
        "g": "4ba3bc1d.e5d164",
        "method": "POST",
        "observe": false,
        "url": "",
        "content-format": "text/plain",
        "raw-buffer": false,
        "name": "coap",
        "x": 890,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "ad678ff2.684a5",
        "type": "inject",
        "z": "9cc8bab8.422b58",
        "name": "flow.set trigger",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 40,
        "wires": [
            [
                "78f909cb.ee0ab8"
            ]
        ]
    },
    {
        "id": "78f909cb.ee0ab8",
        "type": "function",
        "z": "9cc8bab8.422b58",
        "name": "flow.set demo",
        "func": "// channel ids\nflow.set(\"MF_FLOOR_1\", \"038774f6-1d37-4dab-9107-487adc3466a4\");\nflow.set(\"MF_FLOOR_2\", \"32628244-4569-45fa-84c8-a4ac4a77f258\");\nflow.set(\"MF_FLOOR_3\", \"7c2cd060-ff49-4849-a544-82789a69e8de\");\n\n// http thing key\nflow.set(\"MF_HTTP\", \"96849faa-ff19-47e9-890a-5d29af728fae\"); \nflow.set(\"MF_URL\", \"iot.ashvin.eu\");\n\nflow.set(\"MF_HTTPS\", true);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 320,
        "y": 20,
        "wires": [
            []
        ]
    },
    {
        "id": "b2206ecf.cae3d",
        "type": "comment",
        "z": "9cc8bab8.422b58",
        "g": "b83b6144.2bb6c",
        "name": "floor_n flow.get",
        "info": "",
        "x": 200,
        "y": 600,
        "wires": []
    },
    {
        "id": "64921d5d.31ac14",
        "type": "comment",
        "z": "9cc8bab8.422b58",
        "g": "a76816b6.8dc578",
        "name": "url & http flow.get",
        "info": "",
        "x": 420,
        "y": 560,
        "wires": []
    },
    {
        "id": "8d0172b7.d9d35",
        "type": "comment",
        "z": "9cc8bab8.422b58",
        "g": "4ba3bc1d.e5d164",
        "name": "http/mqtt credentials",
        "info": "## http\nGenerate certificates in bash. Set certificates in node-red.\n\n## mqtt\nexport MF_MQTT_SERV= \\\nexport MF_MQTT_USER= \\\nexport MF_MQTT_PASS= \\\n\nSet mqtt node server, username and password fields with \n\n${MF_MQTT_SERV}\n${MF_MQTT_USER}\n${MF_MQTT_PASS}\n\nenv vars.",
        "x": 730,
        "y": 460,
        "wires": []
    },
    {
        "id": "dbcd0064.e069c",
        "type": "function",
        "z": "9cc8bab8.422b58",
        "name": "flow.set local",
        "func": "// channel ids\nflow.set(\"MF_FLOOR_1\", \"bfef0896-787b-4c22-99f4-e1cccf5ee803\");\nflow.set(\"MF_FLOOR_2\", \"20aa420f-e6c5-4fb4-9581-0ca77ca99f14\");\nflow.set(\"MF_FLOOR_3\", \"f7b137be-63ca-4393-871a-fb5413fba587\");\n\n// http thing key\nflow.set(\"MF_HTTP\", \"509d1c29-c0ea-4504-9fe4-c3d5c20a9462\"); \nflow.set(\"MF_URL\", \"localhost\");\n\nflow.set(\"MF_HTTPS\", false);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 310,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "2351332e.45998c",
        "type": "mqtt-broker",
        "z": "",
        "name": "building",
        "broker": "iot.ashvin.eu",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "3341d38b.e4e6ec",
        "type": "tls-config",
        "z": "",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "thing.crt",
        "keyname": "thing.key",
        "caname": "ca.crt",
        "servername": "",
        "verifyservercert": false
    }
]